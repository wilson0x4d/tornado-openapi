# SPDX-FileCopyrightText: Copyright (C) Shaun Wilson
# SPDX-License-Identifier: MIT

import tornado
from typing import Callable

from .objects.Info import Info
from .objects.OAuthFlows import OAuthFlows
from .objects.ParameterLocation import ParameterLocation
from .objects.SecurityScheme import SecurityScheme, SecuritySchemeType
from .OpenApiConfiguration import OpenApiConfiguration
from .OpenApiHandler import OpenApiHandler


type OpenApiConfigurator = OpenApiConfigurator
class OpenApiConfigurator:
    """
    Configures an OpenAPI endpoint for the specified ``tornado.web.Application``.

    """

    __app:tornado.web.Application
    __filter:Callable[[str], bool]
    __info:Info
    __pattern:str
    __securitySchemes:dict[str,SecurityScheme]
    __staticFilesPath:str 

    def __init__(self, app:tornado.web.Application) -> None:
        self.__app = app
        self.__filter = lambda e: True
        self.__info = None
        self.__pattern = r'/(swagger.*)'
        self.__securitySchemes = dict[str,SecurityScheme]()
        self.__staticFilesPath = './swagger-ui'

    def commit(self, host:str|list[str] = '.*') -> OpenApiConfiguration:
        """
        Finalizes the configuration and configures Tornado to handle relevant requests.
        """
        result = OpenApiConfiguration()
        result.securitySchemes = self.__securitySchemes
        result.filter = self.__filter
        result.info = self.__info
        result.pattern = self.__pattern
        result.staticFilesPath = self.__staticFilesPath
        if type(host) is str:
            self.__app.add_handlers(host, [(self.__pattern, OpenApiHandler, { 'oaconfig':result })])
        else:
            for h in host:
                self.__app.add_handlers(h, [(self.__pattern, OpenApiHandler, { 'oaconfig':result })])
        return result
    
    def pattern(self, pattern:str) -> OpenApiConfigurator:
        """
        OPTIONAL. Sets the pattern for request matching. Default is ``r'/(swagger.*)'``.
        """
        self.__pattern = pattern
        return self
    
    def staticFilesPath(self, path:str) -> OpenApiConfigurator:
        """
        OPTIONAL. Sets the path (relative or absolute) where ``swagger-ui`` static files can be found. Default is ``"./swagger-ui"``.
        """
        self.__staticFilesPath = path
        return self

    def info(self, info:Info) -> OpenApiConfigurator:
        """
        REQUIRED. Sets the Info Object for the endpoint.
        """
        self.__info = info
        return self

    def filter(self, predicate:Callable[[str], bool]) -> OpenApiConfigurator:
        """
        OPTIONAL. Sets a filter allowing you to control which 'tags' or 'api groups' are included in the resulting OAS.

        By default, all tags are included. The assumption is that a given server will only have one OAS document which describes all available APIs.
        """
        self.__filter = predicate
        return self

    def apiKey(self, description:str = None, name:str = 'X-API-Key', location:ParameterLocation = ParameterLocation.HEADER) -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that API KEY Authentication is supported.

        :param str name: The name of the header, query or cookie parameter containing the API KEY. Default is ``'X-API-Key'``
        :param str description: A useful description of the API KEY authentication.
        :param ParameterLocation location: The location of the API KEY. Default is ``HEADER``.
        """
        self.__securitySchemes['apiKey'] = SecurityScheme(
            type=SecuritySchemeType.APIKEY,
            name=name,
            description=description,
            location=location
        )
        return self

    def httpBasic(self, description:str = None) -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that HTTP BASIC Authentication is supported.

        :param str description: A useful description of the HTTP BASIC authentication.
        """
        self.__securitySchemes['httpBasic'] = SecurityScheme(
            type=SecuritySchemeType.HTTP,
            description=description,
            scheme='Basic'
        )
        return self

    def bearerToken(self, description:str = None, bearerFormat:str = 'JWT') -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that BEARER TOKEN Authentication is supported.

        :param str description: A useful description of the BEARER TOKEN authentication.
        :param str bearerFormat: A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
        """
        self.__securitySchemes['bearerToken'] = SecurityScheme(
            type=SecuritySchemeType.HTTP,
            description=description,
            scheme='Bearer',
            bearerFormat=bearerFormat
        )
        return self


    def mutualTLS(self, description:str = None) -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that MUTUAL TLS Authentication is supported.

        :param str description: A useful description of the MUTUAL TLS authentication.
        """
        self.__securitySchemes['mutualTLS'] = SecurityScheme(
            type=SecuritySchemeType.MUTUALTLS,
            description=description
        )
        return self

    def oauth2(self, flows:OAuthFlows, description:str = None) -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that OAUTH2 Authentication is supported.

        :param OAuthFlows flows: The OAuth flows that are allowed.
        :param str description: A useful description of the OAUTH2 authentication.
        """
        self.__securitySchemes['oauth2'] = SecurityScheme(
            type=SecuritySchemeType.OAUTH2,
            description=description,
            flows=flows
        )
        return self

    def openId(self, openIdConnectUrl:str, description:str = None) -> OpenApiConfigurator:
        """
        OPTIONAL. Indicates that OPENID Authentication is supported.

        :param str openIdConnectUrl: `Well-known URL <https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml>`_ to discover the `OpenID-Connect-Discovery provider metadata <https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata>`_..
        :param str description: A useful description of the OPENID authentication.
        """
        self.__securitySchemes['openIdConnect'] = SecurityScheme(
            type=SecuritySchemeType.OPENIDCONNECT,
            description=description,
            openIdConnectUrl=openIdConnectUrl
        )
        return self
